pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage ("Clean Workspace") {
            steps {
                cleanWs()
            }
        }

        stage ("Git Checkout") {
            steps {
                git 'git@github.com:saitejareddyg/DevOps-Project-Zomato-Kastro.git'
            }
        }

        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=zomato \
                        -Dsonar.projectKey=zomato'''
                }
            }
        }

        stage("Code Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }

        stage('OWASP FS SCAN') {
    steps {
        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
            dependencyCheck additionalArguments: '--scan ./ --out . --disableYarnAudit --disableNodeAudit --autoUpdate', odcInstallation: 'DP-Check'
        }
        script {
            if (!fileExists('dependency-check-report.xml')) {
                echo "WARNING: OWASP report not generated!"
            }
        }
        dependencyCheckPublisher pattern: 'dependency-check-report.xml'
    }
}

        stage ("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }

        stage ("Build Docker Image") {
            steps {
                sh "docker build -t zomato ."
            }
        }

        stage ("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag zomato saiteja8270/zomato:latest"
                        sh "docker push saiteja8270/zomato:latest"
                    }
                }
            }
        }

        stage('Docker Scout Image') {
    steps {
        script {
            withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                sh '''
                    mkdir -p /var/lib/jenkins/.docker/cli-plugins
                    curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /var/lib/jenkins/.docker/cli-plugins
                    export PATH=/var/lib/jenkins/.docker/cli-plugins:$PATH

                    docker-scout quickview saiteja8270/zomato:latest
                    docker-scout cves saiteja8270/zomato:latest
                    docker-scout recommendations saiteja8270/zomato:latest
                '''
            }
        }
    }
}
        stage ("Deploy to Container") {
            steps {
                script {
                    sh 'docker rm -f zomato || true'
                    sh 'docker run -d --name zomato -p 3000:3000 saiteja8270/zomato:latest'
                }
            }
        }
    }

    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: """
                    <html>
                    <body>
                        <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                        </div>
                        <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                        </div>
                        <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'gaddam291555@gmail.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy.txt, dependency-check-report.xml'
        }
    }
}
